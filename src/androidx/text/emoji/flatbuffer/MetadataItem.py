# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class MetadataItem(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsMetadataItem(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetadataItem()
        x.Init(buf, n + offset)
        return x

    # MetadataItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetadataItem
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MetadataItem
    def EmojiStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
            )
        return False

    # MetadataItem
    def SdkAdded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MetadataItem
    def CompatAdded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MetadataItem
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MetadataItem
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MetadataItem
    def Codepoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # MetadataItem
    def CodepointsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MetadataItem
    def CodepointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MetadataItem
    def CodepointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0


def MetadataItemStart(builder):
    builder.StartObject(7)


def MetadataItemAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)


def MetadataItemAddEmojiStyle(builder, emojiStyle):
    builder.PrependBoolSlot(1, emojiStyle, 0)


def MetadataItemAddSdkAdded(builder, sdkAdded):
    builder.PrependInt16Slot(2, sdkAdded, 0)


def MetadataItemAddCompatAdded(builder, compatAdded):
    builder.PrependInt16Slot(3, compatAdded, 0)


def MetadataItemAddWidth(builder, width):
    builder.PrependInt16Slot(4, width, 0)


def MetadataItemAddHeight(builder, height):
    builder.PrependInt16Slot(5, height, 0)


def MetadataItemAddCodepoints(builder, codepoints):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(codepoints), 0
    )


def MetadataItemStartCodepointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def MetadataItemEnd(builder):
    return builder.EndObject()
